<?php
/**
 *
1 E_ERROR Fatal run-time errors. Errors that can not be recovered from. Execution of the script is halted
2 E_WARNING Non-fatal run-time errors. Execution of the script is not halted
4 E_PARSE Compile-time parse errors. Parse errors should only be generated by the parser
8 E_NOTICE Run-time notices. The script found something that might be an error, but could also happen when running a script normally
16 E_CORE_ERROR Fatal errors at PHP startup. This is like an E_ERROR in the PHP core
32 E_CORE_WARNING Non-fatal errors at PHP startup. This is like an E_WARNING in the PHP core
64 E_COMPILE_ERROR Fatal compile-time errors. This is like an E_ERROR generated by the Zend Scripting Engine
128 E_COMPILE_WARNING Non-fatal compile-time errors. This is like an E_WARNING generated by the Zend Scripting Engine
256 E_USER_ERROR Fatal user-generated error. This is like an E_ERROR set by the programmer using the PHP function trigger_error()
512 E_USER_WARNING Non-fatal user-generated warning. This is like an E_WARNING set by the programmer using the PHP function trigger_error()
1024 E_USER_NOTICE User-generated notice. This is like an E_NOTICE set by the programmer using the PHP function trigger_error()
2048 E_STRICT Run-time notices. PHP suggest changes to your code to help interoperability and compatibility of the code
4096 E_RECOVERABLE_ERROR Catchable fatal error. This is like an E_ERROR but can be caught by a user defined handle (see also set_error_handler())
8191 E_ALL All errors and warnings, except level E_STRICT (E_STRICT will be part of E_ALL as of PHP 6.0)

 */
namespace Exception;
class error extends \Exception {
    protected $severity;

    public function __construct($message = '', $code = 404, $severity = 75, $filename = '', $lineno = 0) {
        if(isset($message)) {
            $this->message = $message;
        }
        if(isset($code)) {
            $this->code = $code;
        }
        if(isset($severity)) {
            $this->severity = $severity;
        }



    }

    public function getSeverity() {
        return $this->severity;
    }
    public function getErrInfo() {
    	$str = sprintf("<strong>%s</strong> <font color='red'>%s</font> <font color='blue'>%d</font> lines of <font color='blue'>%s</font> [%s(%s)]",$this->errTranslation($this->severity),$this->message,$this->line,$this->file,PHP_VERSION,PHP_OS);
    	if(defined('DEBUG')) {
    		echo $str;
    		echo '<hr>';
    	} else {
    		header('HTTP/1.1 404 Not Found');
    		header('status: 404 Not Found');
    		exit();
    	}


    }
    private function errTranslation($errno) {
    	switch ($errno) {
    	case E_ERROR :
		 return 'E_ERROR';
		case E_WARNING :
		 return 'E_WARNING';
		case E_PARSE :
		 return 'E_PARSE';
		case E_NOTICE :
		 return 'E_NOTICE';
		case E_CORE_ERROR :
		 return 'E_CORE_ERROR';
		case E_CORE_WARNING :
		 return 'E_CORE_WARNING';
		case E_COMPILE_ERROR :
		 return 'E_COMPILE_ERROR';
		case E_COMPILE_WARNING :
		 return 'E_COMPILE_WARNING';
		case E_USER_ERROR :
		 return 'E_USER_ERROR';
		case E_USER_WARNING :
		 return 'E_USER_WARNING';
		case E_USER_NOTICE :
		 return 'E_USER_NOTICE';
		case E_STRICT :
		 return 'E_STRICT';
		case E_RECOVERABLE_ERROR :
		 return 'E_RECOVERABLE_ERROR';
		case E_ALL :
		 return 'E_ALL';

    default:
        return  "Unknown";
        break;
    }

    }
}
